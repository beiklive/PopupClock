name: Windows CI
on:
  push:
    paths:
      - '*.pro'
      - 'src/**'
      - '.github/workflows/windows.yml'
  pull_request:
    paths:
      - '*.pro'
      - 'src/**'
      - '.github/workflows/windows.yml'
jobs:
  build:
    name: Build
    runs-on: windows-2019
    strategy:
      # 矩阵配置
      matrix:
        include:
          - qt_ver: 5.15.2
            qt_arch: win32_msvc2019
            msvc_arch: x86
            qt_arch_install: msvc2019
          - qt_ver: 5.15.2
            qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
    env:
      targetName: PopupClock.exe
    # 步骤
    steps:
      # 安装Qt
      - name: Install Qt
        # 使用外部action。这个action专门用来安装Qt
        uses: jurplel/install-qt-action@v2
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          # target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cached: 'false'
          aqtversion: '==2.0.5'
      # 拉取代码
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: 1
      # msvc编译
      - name: Build Windows
        id: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          qmake
          nmake
          echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%
      # 打包
      - name: Package
        id: package
        env:
          archiveName: PopupClock_windows_${{ matrix.msvc_arch }}
          msvcArch: ${{ matrix.msvc_arch }}
        shell: pwsh
        run: |
          & scripts\windows-publish.ps1 ${env:archiveName} ${env:targetName}
          # 记录package_name给后续step
          $name = ${env:archiveName}
          echo "::set-output name=package_name::$name"
          $tag_name = "${{ github.ref }}" -replace "refs/tags/",""
          echo "::set-output name=tagName::$tag_name"
      # tag 查询github-Release
      # 上传artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package.outputs.package_name }}
          path: ${{ steps.package.outputs.package_name }}
      # tag 上传Release
      - name: Upload Release
        if: startsWith(github.event.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.package_name }}.zip
          asset_name: ${{ steps.package.outputs.package_name }}_${{ steps.package.outputs.tagName }}.zip
          tag: ${{ github.ref }}
          overwrite: true
